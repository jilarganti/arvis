import glob from 'fast-glob';
import { l as loadWithJiti } from '../shared/core.47b71d59.mjs';
import { error } from '../cli/console.mjs';
import { updateConfig } from './index6.mjs';
import 'node:module';
import 'node:path';
import '@clack/core';
import 'picocolors';
import 'node:fs';
import '../config/index.mjs';
import 'zod';
import '../shared/core.69eed5f0.mjs';

async function vitepress(configPath, skipQuestions) {
  const config = await loadVitepressConfig();
  const allLocales = config.locales ? Object.values(config.locales).map(({ lang, label }) => ({ label, lang })) : void 0;
  const defaultLocale = allLocales?.find((locale) => locale.label === config.locales?.root?.label);
  const locales = allLocales?.filter((locale) => locale.label !== defaultLocale?.label);
  const file = {
    location: "**/*.md",
    pattern: "@lang/@path",
    type: "universal"
  };
  await updateConfig(configPath, defaultLocale, locales, file, skipQuestions);
}
async function loadVitepressConfig() {
  const configPaths = await glob(".vitepress/config.{js,ts,mjs,mts}", {
    cwd: process.cwd(),
    ignore: ["node_modules"]
  });
  if (!configPaths[0]) {
    console.error(error("Failed to find a valid Vitepress config"));
    process.exit(1);
  }
  const vitepressConfig = await loadWithJiti(configPaths[0]);
  return vitepressConfig;
}

export { vitepress };
