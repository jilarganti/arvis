import { createRequire } from 'node:module';
import { resolve } from 'node:path';
import { error, highlight } from '../cli/console.mjs';

function toUtcString(date) {
  return new Date(date).toISOString();
}
function getStringFromFormat(format, placeholders) {
  let formatResult = format;
  Object.keys(placeholders).forEach((key) => {
    formatResult = formatResult.replace(key, placeholders[key] ?? "");
  });
  return formatResult;
}
function loadWithJiti(path) {
  const require = createRequire(import.meta.url);
  const jiti = require("jiti");
  const loadFile = jiti(process.cwd(), {
    interopDefault: true,
    esmResolve: true
  });
  try {
    const resolvedPath = resolve(path);
    const file = loadFile(resolvedPath);
    return file;
  } catch (e) {
    console.error(error(`Failed to load module at ${highlight(path)}
`));
    throw e;
  }
}
function isRelative(path) {
  return path.startsWith("./") || path.startsWith("../");
}
function removeTrailingSlash(path) {
  return path.replace(/\/+$/, "");
}

export { getStringFromFormat as g, isRelative as i, loadWithJiti as l, removeTrailingSlash as r, toUtcString as t };
